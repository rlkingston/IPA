IPA compilation from source under Mac OS. 

We have tested compilation under Mac OS 10.15 (Catalina), Mac OS 11 (Big Sur) and Mac Os 12 (Montery) on Machines with Intel chip Architecture. 
On these machines compilation of the clipper library from CCP4 version 7 is straightforward. This is the Key dependency for program IPA.   
For newer machines, with Apple Silicon chip architecture,  getting the CCP4 version 7 library to compile from source is a little tricky
We don't detail the procedure here, though it can be done. 

Installing Compilers and Dependencies

First we need a C++ compiler. We have been using the version distributed with the Xcode Developer Tools 

  + Install XCode Developer Tools via App store download
  + Install the Xcode command line tools - from the terminal you can issue the command: xcode-select --install

We also need a Fortran compiler. 

  + We have been using the precompiled versions of gfortran from  http://hpc.sourceforge.net
  + Download and install the version relevant to your version of MacOS and chip architecture. You don't need the full gcc package, just gfortran

We need access to the Clipper crystallographic library which is distributed as part of the CCP4 suite. 
We use CCP4 version 7, as the source code is not yet publicly available for CCP4 version 8.

  + To compile CCP4 from source you need a handful of basic development tools. The easiest way to install these is with a package manager - we use MacPorts
    -Download and install the MacPorts system for your version of Mac OS (https://www.macports.org/install.php)
    - From the terminal update the MacPorts package: sudo port -v selfupdate
    - From the terminal, install the packages required for CCP4 library compilation: sudo port install bzr cmake qt4-mac swig-python 
  + Download the CCP4 7.1 source code from https://www.ccp4.ac.uk/?page_id=2593
  + If you ever want to compile more than the clipper libraries within CCP4 you will also want to download and install Xquartz from  https://www.xquartz.org
  + Unpack and move the CCP4 7 devtools distribution to its final location 
  + In the terminal, cd into the top level directory of the CCP4 distribution
  + For successful compilation of the clipper library you need to set several FLAGS which will be picked up by conf.py and used by the build system 
  + For Mac OS 10.15 / 11 / 12 
     # Tell the compiler where the system libraries and headers are located, suppress checking of argument mismatches ...
     export FFLAGS="-I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include -L/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib -fallow-argument-mismatch" 
     # Suppress checking for implicit function declaration 
     export CFLAGS="-Wno-implicit"
  + Compile the clipper libraries: ./cj build clipper 

We need the Eigen C++ template library for linear algebra

  + Downloaded the latest version from https://eigen.tuxfamily.org/ (or install it using MacPorts)
  + The Eigen library consists only of C++ header files, so there is nothing to compile.

Compiling IPA

  + Download and unpack the IPA distribution, and in the terminal, cd to the src directory.
  + Edit the paths in the makefile, so that they point to the correct locations for gfortran, the clipper library and header files, and the Eigen C++ template library
  + Type make, and the program should build. The executable will be placed in the bin directory, parallel to src


Running IPA
  + The examples directory contains the data and the parameter file required to run the program on test case (PDB ID 2w4m). 
  + One shell environment variable, IPA_DIR, specifies the location of the IPA distribution. This must always be set before executing the program
  + The operation of the program is controlled through the parameter file, which you provide as an argument to the program
  + The README file on GitHUb describes the general nature of the program inputs and outputs. 
  + There is currently no manual of any sort (sorry), but we are happy to answer questions !!
